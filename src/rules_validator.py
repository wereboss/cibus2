# /cibus2/src/rules_validator.py

import json
import logging
from typing import Dict, Any, List

logger = logging.getLogger(__name__)

class RulesValidator:
    """
    Validates and cleans a JSON rules file generated by an LLM.
    """
    def __init__(self, raw_rules: Dict[str, Any]):
        self.raw_rules = raw_rules
        self.cleaned_rules = {}

    def validate_and_clean(self) -> Dict[str, Any]:
        """
        Performs a series of validations and sanitization steps on the raw rules.
        """
        logger.info("Starting validation and cleaning of rules JSON.")
        
        # --- Critical checks for top-level structure ---
        if 'global_config' not in self.raw_rules or 'fields' not in self.raw_rules:
            raise ValueError("JSON is missing critical top-level keys: 'global_config' or 'fields'.")

        self.cleaned_rules['global_config'] = self.raw_rules['global_config']
        self.cleaned_rules['fields'] = []

        # --- Iterate and validate each field ---
        for field in self.raw_rules['fields']:
            cleaned_field = self._validate_field(field)
            self.cleaned_rules['fields'].append(cleaned_field)

        logger.info("Rules JSON successfully validated and cleaned.")
        return self.cleaned_rules

    def _validate_field(self, field: Dict[str, Any]) -> Dict[str, Any]:
        """
        Validates a single field entry.
        """
        required_keys = ['name', 'generation_order', 'generation']
        for key in required_keys:
            if key not in field:
                raise KeyError(f"Field entry is missing a required key: '{key}'. Faulty field: {field}")
        
        # We can add more specific type and value checks here later.
        # For now, we'll return a copy of the field assuming basic integrity.
        return field